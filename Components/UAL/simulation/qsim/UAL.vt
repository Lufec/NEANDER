// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2019 22:22:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    UAL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UAL_vlg_sample_tst(
	inX,
	inY,
	selUAL,
	sampler_tx
);
input [7:0] inX;
input [7:0] inY;
input [2:0] selUAL;
output sampler_tx;

reg sample;
time current_time;
always @(inX or inY or selUAL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module UAL_vlg_check_tst (
	Negativo,
	oUAL,
	zero,
	sampler_rx
);
input  Negativo;
input [7:0] oUAL;
input  zero;
input sampler_rx;

reg  Negativo_expected;
reg [7:0] oUAL_expected;
reg  zero_expected;

reg  Negativo_prev;
reg [7:0] oUAL_prev;
reg  zero_prev;

reg  Negativo_expected_prev;
reg [7:0] oUAL_expected_prev;
reg  zero_expected_prev;

reg  last_Negativo_exp;
reg [7:0] last_oUAL_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Negativo_prev = Negativo;
	oUAL_prev = oUAL;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	Negativo_expected_prev = Negativo_expected;
	oUAL_expected_prev = oUAL_expected;
	zero_expected_prev = zero_expected;
end



// expected Negativo
initial
begin
	Negativo_expected = 1'bX;
end 
// expected oUAL[ 7 ]
initial
begin
	oUAL_expected[7] = 1'bX;
end 
// expected oUAL[ 6 ]
initial
begin
	oUAL_expected[6] = 1'bX;
end 
// expected oUAL[ 5 ]
initial
begin
	oUAL_expected[5] = 1'bX;
end 
// expected oUAL[ 4 ]
initial
begin
	oUAL_expected[4] = 1'bX;
end 
// expected oUAL[ 3 ]
initial
begin
	oUAL_expected[3] = 1'bX;
end 
// expected oUAL[ 2 ]
initial
begin
	oUAL_expected[2] = 1'bX;
end 
// expected oUAL[ 1 ]
initial
begin
	oUAL_expected[1] = 1'bX;
end 
// expected oUAL[ 0 ]
initial
begin
	oUAL_expected[0] = 1'bX;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// generate trigger
always @(Negativo_expected or Negativo or oUAL_expected or oUAL or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Negativo = %b | expected oUAL = %b | expected zero = %b | ",Negativo_expected_prev,oUAL_expected_prev,zero_expected_prev);
	$display("| real Negativo = %b | real oUAL = %b | real zero = %b | ",Negativo_prev,oUAL_prev,zero_prev);
`endif
	if (
		( Negativo_expected_prev !== 1'bx ) && ( Negativo_prev !== Negativo_expected_prev )
		&& ((Negativo_expected_prev !== last_Negativo_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Negativo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Negativo_expected_prev);
		$display ("     Real value = %b", Negativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Negativo_exp = Negativo_expected_prev;
	end
	if (
		( oUAL_expected_prev[0] !== 1'bx ) && ( oUAL_prev[0] !== oUAL_expected_prev[0] )
		&& ((oUAL_expected_prev[0] !== last_oUAL_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oUAL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oUAL_expected_prev);
		$display ("     Real value = %b", oUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oUAL_exp[0] = oUAL_expected_prev[0];
	end
	if (
		( oUAL_expected_prev[1] !== 1'bx ) && ( oUAL_prev[1] !== oUAL_expected_prev[1] )
		&& ((oUAL_expected_prev[1] !== last_oUAL_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oUAL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oUAL_expected_prev);
		$display ("     Real value = %b", oUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oUAL_exp[1] = oUAL_expected_prev[1];
	end
	if (
		( oUAL_expected_prev[2] !== 1'bx ) && ( oUAL_prev[2] !== oUAL_expected_prev[2] )
		&& ((oUAL_expected_prev[2] !== last_oUAL_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oUAL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oUAL_expected_prev);
		$display ("     Real value = %b", oUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oUAL_exp[2] = oUAL_expected_prev[2];
	end
	if (
		( oUAL_expected_prev[3] !== 1'bx ) && ( oUAL_prev[3] !== oUAL_expected_prev[3] )
		&& ((oUAL_expected_prev[3] !== last_oUAL_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oUAL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oUAL_expected_prev);
		$display ("     Real value = %b", oUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oUAL_exp[3] = oUAL_expected_prev[3];
	end
	if (
		( oUAL_expected_prev[4] !== 1'bx ) && ( oUAL_prev[4] !== oUAL_expected_prev[4] )
		&& ((oUAL_expected_prev[4] !== last_oUAL_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oUAL[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oUAL_expected_prev);
		$display ("     Real value = %b", oUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oUAL_exp[4] = oUAL_expected_prev[4];
	end
	if (
		( oUAL_expected_prev[5] !== 1'bx ) && ( oUAL_prev[5] !== oUAL_expected_prev[5] )
		&& ((oUAL_expected_prev[5] !== last_oUAL_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oUAL[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oUAL_expected_prev);
		$display ("     Real value = %b", oUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oUAL_exp[5] = oUAL_expected_prev[5];
	end
	if (
		( oUAL_expected_prev[6] !== 1'bx ) && ( oUAL_prev[6] !== oUAL_expected_prev[6] )
		&& ((oUAL_expected_prev[6] !== last_oUAL_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oUAL[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oUAL_expected_prev);
		$display ("     Real value = %b", oUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oUAL_exp[6] = oUAL_expected_prev[6];
	end
	if (
		( oUAL_expected_prev[7] !== 1'bx ) && ( oUAL_prev[7] !== oUAL_expected_prev[7] )
		&& ((oUAL_expected_prev[7] !== last_oUAL_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oUAL[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oUAL_expected_prev);
		$display ("     Real value = %b", oUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oUAL_exp[7] = oUAL_expected_prev[7];
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module UAL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] inX;
reg [7:0] inY;
reg [2:0] selUAL;
// wires                                               
wire Negativo;
wire [7:0] oUAL;
wire zero;

wire sampler;                             

// assign statements (if any)                          
UAL i1 (
// port map - connection between master ports and signals/registers   
	.inX(inX),
	.inY(inY),
	.Negativo(Negativo),
	.oUAL(oUAL),
	.selUAL(selUAL),
	.zero(zero)
);
// inX[ 7 ]
initial
begin
	inX[7] = 1'b0;
	inX[7] = #25000 1'b1;
	inX[7] = #25000 1'b0;
	inX[7] = #75000 1'b1;
	inX[7] = #25000 1'b0;
	inX[7] = #75000 1'b1;
	inX[7] = #25000 1'b0;
	inX[7] = #50000 1'b1;
	inX[7] = #25000 1'b0;
	inX[7] = #25000 1'b1;
	inX[7] = #25000 1'b0;
	inX[7] = #25000 1'b1;
	inX[7] = #25000 1'b0;
	inX[7] = #75000 1'b1;
	inX[7] = #25000 1'b0;
	inX[7] = #25000 1'b1;
	inX[7] = #50000 1'b0;
	inX[7] = #25000 1'b1;
	inX[7] = #25000 1'b0;
	inX[7] = #50000 1'b1;
	inX[7] = #25000 1'b0;
	inX[7] = #100000 1'b1;
	inX[7] = #25000 1'b0;
	inX[7] = #100000 1'b1;
end 
// inX[ 6 ]
initial
begin
	inX[6] = 1'b1;
	inX[6] = #25000 1'b0;
	inX[6] = #50000 1'b1;
	inX[6] = #25000 1'b0;
	inX[6] = #125000 1'b1;
	inX[6] = #25000 1'b0;
	inX[6] = #100000 1'b1;
	inX[6] = #50000 1'b0;
	inX[6] = #25000 1'b1;
	inX[6] = #25000 1'b0;
	inX[6] = #25000 1'b1;
	inX[6] = #25000 1'b0;
	inX[6] = #25000 1'b1;
	inX[6] = #25000 1'b0;
	inX[6] = #25000 1'b1;
	inX[6] = #25000 1'b0;
	inX[6] = #50000 1'b1;
	inX[6] = #50000 1'b0;
	inX[6] = #25000 1'b1;
	inX[6] = #25000 1'b0;
	inX[6] = #75000 1'b1;
	inX[6] = #25000 1'b0;
	inX[6] = #25000 1'b1;
	inX[6] = #50000 1'b0;
	inX[6] = #25000 1'b1;
	inX[6] = #25000 1'b0;
end 
// inX[ 5 ]
initial
begin
	inX[5] = 1'b0;
	inX[5] = #125000 1'b1;
	inX[5] = #25000 1'b0;
	inX[5] = #25000 1'b1;
	inX[5] = #150000 1'b0;
	inX[5] = #75000 1'b1;
	inX[5] = #25000 1'b0;
	inX[5] = #25000 1'b1;
	inX[5] = #25000 1'b0;
	inX[5] = #25000 1'b1;
	inX[5] = #25000 1'b0;
	inX[5] = #25000 1'b1;
	inX[5] = #50000 1'b0;
	inX[5] = #25000 1'b1;
	inX[5] = #25000 1'b0;
	inX[5] = #25000 1'b1;
	inX[5] = #50000 1'b0;
	inX[5] = #25000 1'b1;
	inX[5] = #25000 1'b0;
	inX[5] = #25000 1'b1;
	inX[5] = #25000 1'b0;
	inX[5] = #25000 1'b1;
	inX[5] = #25000 1'b0;
	inX[5] = #75000 1'b1;
end 
// inX[ 4 ]
initial
begin
	inX[4] = 1'b1;
	inX[4] = #75000 1'b0;
	inX[4] = #25000 1'b1;
	inX[4] = #50000 1'b0;
	inX[4] = #100000 1'b1;
	inX[4] = #50000 1'b0;
	inX[4] = #25000 1'b1;
	inX[4] = #25000 1'b0;
	inX[4] = #150000 1'b1;
	inX[4] = #25000 1'b0;
	inX[4] = #50000 1'b1;
	inX[4] = #225000 1'b0;
	inX[4] = #50000 1'b1;
	inX[4] = #50000 1'b0;
	inX[4] = #50000 1'b1;
	inX[4] = #25000 1'b0;
end 
// inX[ 3 ]
initial
begin
	inX[3] = 1'b1;
	inX[3] = #25000 1'b0;
	inX[3] = #25000 1'b1;
	inX[3] = #100000 1'b0;
	inX[3] = #75000 1'b1;
	inX[3] = #25000 1'b0;
	inX[3] = #125000 1'b1;
	inX[3] = #25000 1'b0;
	inX[3] = #75000 1'b1;
	inX[3] = #50000 1'b0;
	inX[3] = #100000 1'b1;
	inX[3] = #25000 1'b0;
	inX[3] = #75000 1'b1;
	inX[3] = #25000 1'b0;
	inX[3] = #25000 1'b1;
	inX[3] = #125000 1'b0;
	inX[3] = #50000 1'b1;
	inX[3] = #25000 1'b0;
end 
// inX[ 2 ]
initial
begin
	inX[2] = 1'b1;
	inX[2] = #25000 1'b0;
	inX[2] = #50000 1'b1;
	inX[2] = #25000 1'b0;
	inX[2] = #75000 1'b1;
	inX[2] = #25000 1'b0;
	inX[2] = #25000 1'b1;
	inX[2] = #25000 1'b0;
	inX[2] = #25000 1'b1;
	inX[2] = #50000 1'b0;
	inX[2] = #75000 1'b1;
	inX[2] = #25000 1'b0;
	inX[2] = #25000 1'b1;
	inX[2] = #25000 1'b0;
	inX[2] = #75000 1'b1;
	inX[2] = #25000 1'b0;
	inX[2] = #25000 1'b1;
	inX[2] = #25000 1'b0;
	inX[2] = #75000 1'b1;
	inX[2] = #75000 1'b0;
	inX[2] = #25000 1'b1;
	inX[2] = #25000 1'b0;
	inX[2] = #25000 1'b1;
	inX[2] = #25000 1'b0;
	inX[2] = #25000 1'b1;
	inX[2] = #25000 1'b0;
end 
// inX[ 1 ]
initial
begin
	inX[1] = 1'b0;
	inX[1] = #25000 1'b1;
	inX[1] = #25000 1'b0;
	inX[1] = #75000 1'b1;
	inX[1] = #25000 1'b0;
	inX[1] = #50000 1'b1;
	inX[1] = #75000 1'b0;
	inX[1] = #25000 1'b1;
	inX[1] = #25000 1'b0;
	inX[1] = #50000 1'b1;
	inX[1] = #25000 1'b0;
	inX[1] = #25000 1'b1;
	inX[1] = #25000 1'b0;
	inX[1] = #25000 1'b1;
	inX[1] = #25000 1'b0;
	inX[1] = #25000 1'b1;
	inX[1] = #50000 1'b0;
	inX[1] = #25000 1'b1;
	inX[1] = #50000 1'b0;
	inX[1] = #25000 1'b1;
	inX[1] = #25000 1'b0;
	inX[1] = #25000 1'b1;
	inX[1] = #25000 1'b0;
	inX[1] = #25000 1'b1;
	inX[1] = #100000 1'b0;
	inX[1] = #50000 1'b1;
	inX[1] = #25000 1'b0;
	inX[1] = #25000 1'b1;
end 
// inX[ 0 ]
initial
begin
	inX[0] = 1'b0;
	inX[0] = #50000 1'b1;
	inX[0] = #150000 1'b0;
	inX[0] = #100000 1'b1;
	inX[0] = #25000 1'b0;
	inX[0] = #25000 1'b1;
	inX[0] = #50000 1'b0;
	inX[0] = #75000 1'b1;
	inX[0] = #25000 1'b0;
	inX[0] = #25000 1'b1;
	inX[0] = #175000 1'b0;
	inX[0] = #125000 1'b1;
	inX[0] = #25000 1'b0;
	inX[0] = #50000 1'b1;
	inX[0] = #25000 1'b0;
	inX[0] = #25000 1'b1;
	inX[0] = #25000 1'b0;
end 
// inY[ 7 ]
initial
begin
	inY[7] = 1'b0;
	inY[7] = #50000 1'b1;
	inY[7] = #50000 1'b0;
	inY[7] = #150000 1'b1;
	inY[7] = #50000 1'b0;
	inY[7] = #200000 1'b1;
	inY[7] = #100000 1'b0;
	inY[7] = #150000 1'b1;
	inY[7] = #50000 1'b0;
	inY[7] = #100000 1'b1;
	inY[7] = #50000 1'b0;
end 
// inY[ 6 ]
initial
begin
	inY[6] = 1'b1;
	inY[6] = #50000 1'b0;
	inY[6] = #50000 1'b1;
	inY[6] = #50000 1'b0;
	inY[6] = #50000 1'b1;
	inY[6] = #50000 1'b0;
	inY[6] = #100000 1'b1;
	inY[6] = #50000 1'b0;
	inY[6] = #100000 1'b1;
	inY[6] = #100000 1'b0;
	inY[6] = #150000 1'b1;
	inY[6] = #150000 1'b0;
	inY[6] = #50000 1'b1;
end 
// inY[ 5 ]
initial
begin
	inY[5] = 1'b0;
	inY[5] = #50000 1'b1;
	inY[5] = #100000 1'b0;
	inY[5] = #50000 1'b1;
	inY[5] = #100000 1'b0;
	inY[5] = #50000 1'b1;
	inY[5] = #50000 1'b0;
	inY[5] = #100000 1'b1;
	inY[5] = #100000 1'b0;
	inY[5] = #200000 1'b1;
	inY[5] = #100000 1'b0;
	inY[5] = #50000 1'b1;
end 
// inY[ 4 ]
initial
begin
	inY[4] = 1'b1;
	inY[4] = #50000 1'b0;
	inY[4] = #250000 1'b1;
	inY[4] = #200000 1'b0;
	inY[4] = #50000 1'b1;
	inY[4] = #100000 1'b0;
	inY[4] = #250000 1'b1;
	inY[4] = #50000 1'b0;
end 
// inY[ 3 ]
initial
begin
	inY[3] = 1'b1;
	inY[3] = #50000 1'b0;
	inY[3] = #50000 1'b1;
	inY[3] = #50000 1'b0;
	inY[3] = #100000 1'b1;
	inY[3] = #200000 1'b0;
	inY[3] = #100000 1'b1;
	inY[3] = #100000 1'b0;
	inY[3] = #50000 1'b1;
	inY[3] = #50000 1'b0;
	inY[3] = #50000 1'b1;
	inY[3] = #50000 1'b0;
	inY[3] = #50000 1'b1;
	inY[3] = #50000 1'b0;
end 
// inY[ 2 ]
initial
begin
	inY[2] = 1'b1;
	inY[2] = #50000 1'b0;
	inY[2] = #100000 1'b1;
	inY[2] = #100000 1'b0;
	inY[2] = #50000 1'b1;
	inY[2] = #100000 1'b0;
	inY[2] = #50000 1'b1;
	inY[2] = #50000 1'b0;
	inY[2] = #50000 1'b1;
	inY[2] = #50000 1'b0;
	inY[2] = #50000 1'b1;
	inY[2] = #150000 1'b0;
	inY[2] = #50000 1'b1;
	inY[2] = #50000 1'b0;
	inY[2] = #50000 1'b1;
end 
// inY[ 1 ]
initial
begin
	inY[1] = 1'b0;
	inY[1] = #100000 1'b1;
	inY[1] = #250000 1'b0;
	inY[1] = #100000 1'b1;
	inY[1] = #50000 1'b0;
	inY[1] = #200000 1'b1;
	inY[1] = #50000 1'b0;
	inY[1] = #50000 1'b1;
	inY[1] = #50000 1'b0;
	inY[1] = #100000 1'b1;
end 
// inY[ 0 ]
initial
begin
	inY[0] = 1'b1;
	inY[0] = #100000 1'b0;
	inY[0] = #50000 1'b1;
	inY[0] = #150000 1'b0;
	inY[0] = #50000 1'b1;
	inY[0] = #50000 1'b0;
	inY[0] = #50000 1'b1;
	inY[0] = #50000 1'b0;
	inY[0] = #350000 1'b1;
	inY[0] = #50000 1'b0;
	inY[0] = #50000 1'b1;
end 
// selUAL[ 2 ]
initial
begin
	selUAL[2] = 1'b0;
	selUAL[2] = #400000 1'b1;
	selUAL[2] = #400000 1'b0;
end 
// selUAL[ 1 ]
initial
begin
	repeat(2)
	begin
		selUAL[1] = 1'b0;
		selUAL[1] = #200000 1'b1;
		# 200000;
	end
	selUAL[1] = 1'b0;
end 
// selUAL[ 0 ]
always
begin
	selUAL[0] = 1'b0;
	selUAL[0] = #100000 1'b1;
	#100000;
end 

UAL_vlg_sample_tst tb_sample (
	.inX(inX),
	.inY(inY),
	.selUAL(selUAL),
	.sampler_tx(sampler)
);

UAL_vlg_check_tst tb_out(
	.Negativo(Negativo),
	.oUAL(oUAL),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

