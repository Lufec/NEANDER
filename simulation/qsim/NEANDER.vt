// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/18/2019 09:27:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    NEANDER
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NEANDER_vlg_sample_tst(
	choice,
	clk,
	go,
	InData,
	reset,
	sampler_tx
);
input [1:0] choice;
input  clk;
input  go;
input [7:0] InData;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(choice or clk or go or InData or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module NEANDER_vlg_check_tst (
	ac,
	code,
	dado,
	DisplayAC1,
	DisplayAC2,
	DisplayAdd,
	DisplayD1,
	DisplayD2,
	endereco,
	loadAc,
	loadnz,
	loadpc,
	loadrdm,
	loadrem,
	loadri,
	read,
	selrdm,
	selrem,
	selual,
	sumpc,
	TurndspOn,
	write,
	sampler_rx
);
input [7:0] ac;
input [3:0] code;
input [7:0] dado;
input [6:0] DisplayAC1;
input [6:0] DisplayAC2;
input [6:0] DisplayAdd;
input [6:0] DisplayD1;
input [6:0] DisplayD2;
input [7:0] endereco;
input  loadAc;
input  loadnz;
input  loadpc;
input  loadrdm;
input  loadrem;
input  loadri;
input  read;
input [1:0] selrdm;
input  selrem;
input [2:0] selual;
input  sumpc;
input  TurndspOn;
input  write;
input sampler_rx;

reg [7:0] ac_expected;
reg [3:0] code_expected;
reg [7:0] dado_expected;
reg [6:0] DisplayAC1_expected;
reg [6:0] DisplayAC2_expected;
reg [6:0] DisplayAdd_expected;
reg [6:0] DisplayD1_expected;
reg [6:0] DisplayD2_expected;
reg [7:0] endereco_expected;
reg  loadAc_expected;
reg  loadnz_expected;
reg  loadpc_expected;
reg  loadrdm_expected;
reg  loadrem_expected;
reg  loadri_expected;
reg  read_expected;
reg [1:0] selrdm_expected;
reg  selrem_expected;
reg [2:0] selual_expected;
reg  sumpc_expected;
reg  TurndspOn_expected;
reg  write_expected;

reg [7:0] ac_prev;
reg [3:0] code_prev;
reg [7:0] dado_prev;
reg [6:0] DisplayAC1_prev;
reg [6:0] DisplayAC2_prev;
reg [6:0] DisplayAdd_prev;
reg [6:0] DisplayD1_prev;
reg [6:0] DisplayD2_prev;
reg [7:0] endereco_prev;
reg  loadAc_prev;
reg  loadnz_prev;
reg  loadpc_prev;
reg  loadrdm_prev;
reg  loadrem_prev;
reg  loadri_prev;
reg  read_prev;
reg [1:0] selrdm_prev;
reg  selrem_prev;
reg [2:0] selual_prev;
reg  sumpc_prev;
reg  TurndspOn_prev;
reg  write_prev;

reg [7:0] ac_expected_prev;
reg [3:0] code_expected_prev;
reg [7:0] dado_expected_prev;
reg [6:0] DisplayAC1_expected_prev;
reg [6:0] DisplayAC2_expected_prev;
reg [6:0] DisplayAdd_expected_prev;
reg [6:0] DisplayD1_expected_prev;
reg [6:0] DisplayD2_expected_prev;
reg [7:0] endereco_expected_prev;
reg  loadAc_expected_prev;
reg  loadnz_expected_prev;
reg  loadpc_expected_prev;
reg  loadrdm_expected_prev;
reg  loadrem_expected_prev;
reg  loadri_expected_prev;
reg  read_expected_prev;
reg [1:0] selrdm_expected_prev;
reg  selrem_expected_prev;
reg [2:0] selual_expected_prev;
reg  sumpc_expected_prev;
reg  TurndspOn_expected_prev;
reg  write_expected_prev;

reg [7:0] last_ac_exp;
reg [3:0] last_code_exp;
reg [7:0] last_dado_exp;
reg [6:0] last_DisplayAC1_exp;
reg [6:0] last_DisplayAC2_exp;
reg [6:0] last_DisplayAdd_exp;
reg [6:0] last_DisplayD1_exp;
reg [6:0] last_DisplayD2_exp;
reg [7:0] last_endereco_exp;
reg  last_loadAc_exp;
reg  last_loadnz_exp;
reg  last_loadpc_exp;
reg  last_loadrdm_exp;
reg  last_loadrem_exp;
reg  last_loadri_exp;
reg  last_read_exp;
reg [1:0] last_selrdm_exp;
reg  last_selrem_exp;
reg [2:0] last_selual_exp;
reg  last_sumpc_exp;
reg  last_TurndspOn_exp;
reg  last_write_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	ac_prev = ac;
	code_prev = code;
	dado_prev = dado;
	DisplayAC1_prev = DisplayAC1;
	DisplayAC2_prev = DisplayAC2;
	DisplayAdd_prev = DisplayAdd;
	DisplayD1_prev = DisplayD1;
	DisplayD2_prev = DisplayD2;
	endereco_prev = endereco;
	loadAc_prev = loadAc;
	loadnz_prev = loadnz;
	loadpc_prev = loadpc;
	loadrdm_prev = loadrdm;
	loadrem_prev = loadrem;
	loadri_prev = loadri;
	read_prev = read;
	selrdm_prev = selrdm;
	selrem_prev = selrem;
	selual_prev = selual;
	sumpc_prev = sumpc;
	TurndspOn_prev = TurndspOn;
	write_prev = write;
end

// update expected /o prevs

always @(trigger)
begin
	ac_expected_prev = ac_expected;
	code_expected_prev = code_expected;
	dado_expected_prev = dado_expected;
	DisplayAC1_expected_prev = DisplayAC1_expected;
	DisplayAC2_expected_prev = DisplayAC2_expected;
	DisplayAdd_expected_prev = DisplayAdd_expected;
	DisplayD1_expected_prev = DisplayD1_expected;
	DisplayD2_expected_prev = DisplayD2_expected;
	endereco_expected_prev = endereco_expected;
	loadAc_expected_prev = loadAc_expected;
	loadnz_expected_prev = loadnz_expected;
	loadpc_expected_prev = loadpc_expected;
	loadrdm_expected_prev = loadrdm_expected;
	loadrem_expected_prev = loadrem_expected;
	loadri_expected_prev = loadri_expected;
	read_expected_prev = read_expected;
	selrdm_expected_prev = selrdm_expected;
	selrem_expected_prev = selrem_expected;
	selual_expected_prev = selual_expected;
	sumpc_expected_prev = sumpc_expected;
	TurndspOn_expected_prev = TurndspOn_expected;
	write_expected_prev = write_expected;
end


// expected ac[ 7 ]
initial
begin
	ac_expected[7] = 1'bX;
end 
// expected ac[ 6 ]
initial
begin
	ac_expected[6] = 1'bX;
end 
// expected ac[ 5 ]
initial
begin
	ac_expected[5] = 1'bX;
end 
// expected ac[ 4 ]
initial
begin
	ac_expected[4] = 1'bX;
end 
// expected ac[ 3 ]
initial
begin
	ac_expected[3] = 1'bX;
end 
// expected ac[ 2 ]
initial
begin
	ac_expected[2] = 1'bX;
end 
// expected ac[ 1 ]
initial
begin
	ac_expected[1] = 1'bX;
end 
// expected ac[ 0 ]
initial
begin
	ac_expected[0] = 1'bX;
end 
// expected dado[ 7 ]
initial
begin
	dado_expected[7] = 1'bX;
end 
// expected dado[ 6 ]
initial
begin
	dado_expected[6] = 1'bX;
end 
// expected dado[ 5 ]
initial
begin
	dado_expected[5] = 1'bX;
end 
// expected dado[ 4 ]
initial
begin
	dado_expected[4] = 1'bX;
end 
// expected dado[ 3 ]
initial
begin
	dado_expected[3] = 1'bX;
end 
// expected dado[ 2 ]
initial
begin
	dado_expected[2] = 1'bX;
end 
// expected dado[ 1 ]
initial
begin
	dado_expected[1] = 1'bX;
end 
// expected dado[ 0 ]
initial
begin
	dado_expected[0] = 1'bX;
end 
// expected endereco[ 7 ]
initial
begin
	endereco_expected[7] = 1'bX;
end 
// expected endereco[ 6 ]
initial
begin
	endereco_expected[6] = 1'bX;
end 
// expected endereco[ 5 ]
initial
begin
	endereco_expected[5] = 1'bX;
end 
// expected endereco[ 4 ]
initial
begin
	endereco_expected[4] = 1'bX;
end 
// expected endereco[ 3 ]
initial
begin
	endereco_expected[3] = 1'bX;
end 
// expected endereco[ 2 ]
initial
begin
	endereco_expected[2] = 1'bX;
end 
// expected endereco[ 1 ]
initial
begin
	endereco_expected[1] = 1'bX;
end 
// expected endereco[ 0 ]
initial
begin
	endereco_expected[0] = 1'bX;
end 
// expected DisplayAdd[ 6 ]
initial
begin
	DisplayAdd_expected[6] = 1'bX;
end 
// expected DisplayAdd[ 5 ]
initial
begin
	DisplayAdd_expected[5] = 1'bX;
end 
// expected DisplayAdd[ 4 ]
initial
begin
	DisplayAdd_expected[4] = 1'bX;
end 
// expected DisplayAdd[ 3 ]
initial
begin
	DisplayAdd_expected[3] = 1'bX;
end 
// expected DisplayAdd[ 2 ]
initial
begin
	DisplayAdd_expected[2] = 1'bX;
end 
// expected DisplayAdd[ 1 ]
initial
begin
	DisplayAdd_expected[1] = 1'bX;
end 
// expected DisplayAdd[ 0 ]
initial
begin
	DisplayAdd_expected[0] = 1'bX;
end 
// expected DisplayD2[ 6 ]
initial
begin
	DisplayD2_expected[6] = 1'bX;
end 
// expected DisplayD2[ 5 ]
initial
begin
	DisplayD2_expected[5] = 1'bX;
end 
// expected DisplayD2[ 4 ]
initial
begin
	DisplayD2_expected[4] = 1'bX;
end 
// expected DisplayD2[ 3 ]
initial
begin
	DisplayD2_expected[3] = 1'bX;
end 
// expected DisplayD2[ 2 ]
initial
begin
	DisplayD2_expected[2] = 1'bX;
end 
// expected DisplayD2[ 1 ]
initial
begin
	DisplayD2_expected[1] = 1'bX;
end 
// expected DisplayD2[ 0 ]
initial
begin
	DisplayD2_expected[0] = 1'bX;
end 
// expected DisplayD1[ 6 ]
initial
begin
	DisplayD1_expected[6] = 1'bX;
end 
// expected DisplayD1[ 5 ]
initial
begin
	DisplayD1_expected[5] = 1'bX;
end 
// expected DisplayD1[ 4 ]
initial
begin
	DisplayD1_expected[4] = 1'bX;
end 
// expected DisplayD1[ 3 ]
initial
begin
	DisplayD1_expected[3] = 1'bX;
end 
// expected DisplayD1[ 2 ]
initial
begin
	DisplayD1_expected[2] = 1'bX;
end 
// expected DisplayD1[ 1 ]
initial
begin
	DisplayD1_expected[1] = 1'bX;
end 
// expected DisplayD1[ 0 ]
initial
begin
	DisplayD1_expected[0] = 1'bX;
end 
// expected DisplayAC2[ 6 ]
initial
begin
	DisplayAC2_expected[6] = 1'bX;
end 
// expected DisplayAC2[ 5 ]
initial
begin
	DisplayAC2_expected[5] = 1'bX;
end 
// expected DisplayAC2[ 4 ]
initial
begin
	DisplayAC2_expected[4] = 1'bX;
end 
// expected DisplayAC2[ 3 ]
initial
begin
	DisplayAC2_expected[3] = 1'bX;
end 
// expected DisplayAC2[ 2 ]
initial
begin
	DisplayAC2_expected[2] = 1'bX;
end 
// expected DisplayAC2[ 1 ]
initial
begin
	DisplayAC2_expected[1] = 1'bX;
end 
// expected DisplayAC2[ 0 ]
initial
begin
	DisplayAC2_expected[0] = 1'bX;
end 
// expected DisplayAC1[ 6 ]
initial
begin
	DisplayAC1_expected[6] = 1'bX;
end 
// expected DisplayAC1[ 5 ]
initial
begin
	DisplayAC1_expected[5] = 1'bX;
end 
// expected DisplayAC1[ 4 ]
initial
begin
	DisplayAC1_expected[4] = 1'bX;
end 
// expected DisplayAC1[ 3 ]
initial
begin
	DisplayAC1_expected[3] = 1'bX;
end 
// expected DisplayAC1[ 2 ]
initial
begin
	DisplayAC1_expected[2] = 1'bX;
end 
// expected DisplayAC1[ 1 ]
initial
begin
	DisplayAC1_expected[1] = 1'bX;
end 
// expected DisplayAC1[ 0 ]
initial
begin
	DisplayAC1_expected[0] = 1'bX;
end 
// expected code[ 3 ]
initial
begin
	code_expected[3] = 1'bX;
end 
// expected code[ 2 ]
initial
begin
	code_expected[2] = 1'bX;
end 
// expected code[ 1 ]
initial
begin
	code_expected[1] = 1'bX;
end 
// expected code[ 0 ]
initial
begin
	code_expected[0] = 1'bX;
end 

// expected loadAc
initial
begin
	loadAc_expected = 1'bX;
end 

// expected loadnz
initial
begin
	loadnz_expected = 1'bX;
end 

// expected loadpc
initial
begin
	loadpc_expected = 1'bX;
end 

// expected loadrdm
initial
begin
	loadrdm_expected = 1'bX;
end 

// expected loadrem
initial
begin
	loadrem_expected = 1'bX;
end 

// expected loadri
initial
begin
	loadri_expected = 1'bX;
end 

// expected read
initial
begin
	read_expected = 1'bX;
end 
// expected selrdm[ 1 ]
initial
begin
	selrdm_expected[1] = 1'bX;
end 
// expected selrdm[ 0 ]
initial
begin
	selrdm_expected[0] = 1'bX;
end 

// expected selrem
initial
begin
	selrem_expected = 1'bX;
end 
// expected selual[ 2 ]
initial
begin
	selual_expected[2] = 1'bX;
end 
// expected selual[ 1 ]
initial
begin
	selual_expected[1] = 1'bX;
end 
// expected selual[ 0 ]
initial
begin
	selual_expected[0] = 1'bX;
end 

// expected sumpc
initial
begin
	sumpc_expected = 1'bX;
end 

// expected TurndspOn
initial
begin
	TurndspOn_expected = 1'bX;
end 

// expected write
initial
begin
	write_expected = 1'bX;
end 
// generate trigger
always @(ac_expected or ac or code_expected or code or dado_expected or dado or DisplayAC1_expected or DisplayAC1 or DisplayAC2_expected or DisplayAC2 or DisplayAdd_expected or DisplayAdd or DisplayD1_expected or DisplayD1 or DisplayD2_expected or DisplayD2 or endereco_expected or endereco or loadAc_expected or loadAc or loadnz_expected or loadnz or loadpc_expected or loadpc or loadrdm_expected or loadrdm or loadrem_expected or loadrem or loadri_expected or loadri or read_expected or read or selrdm_expected or selrdm or selrem_expected or selrem or selual_expected or selual or sumpc_expected or sumpc or TurndspOn_expected or TurndspOn or write_expected or write)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ac = %b | expected code = %b | expected dado = %b | expected DisplayAC1 = %b | expected DisplayAC2 = %b | expected DisplayAdd = %b | expected DisplayD1 = %b | expected DisplayD2 = %b | expected endereco = %b | expected loadAc = %b | expected loadnz = %b | expected loadpc = %b | expected loadrdm = %b | expected loadrem = %b | expected loadri = %b | expected read = %b | expected selrdm = %b | expected selrem = %b | expected selual = %b | expected sumpc = %b | expected TurndspOn = %b | expected write = %b | ",ac_expected_prev,code_expected_prev,dado_expected_prev,DisplayAC1_expected_prev,DisplayAC2_expected_prev,DisplayAdd_expected_prev,DisplayD1_expected_prev,DisplayD2_expected_prev,endereco_expected_prev,loadAc_expected_prev,loadnz_expected_prev,loadpc_expected_prev,loadrdm_expected_prev,loadrem_expected_prev,loadri_expected_prev,read_expected_prev,selrdm_expected_prev,selrem_expected_prev,selual_expected_prev,sumpc_expected_prev,TurndspOn_expected_prev,write_expected_prev);
	$display("| real ac = %b | real code = %b | real dado = %b | real DisplayAC1 = %b | real DisplayAC2 = %b | real DisplayAdd = %b | real DisplayD1 = %b | real DisplayD2 = %b | real endereco = %b | real loadAc = %b | real loadnz = %b | real loadpc = %b | real loadrdm = %b | real loadrem = %b | real loadri = %b | real read = %b | real selrdm = %b | real selrem = %b | real selual = %b | real sumpc = %b | real TurndspOn = %b | real write = %b | ",ac_prev,code_prev,dado_prev,DisplayAC1_prev,DisplayAC2_prev,DisplayAdd_prev,DisplayD1_prev,DisplayD2_prev,endereco_prev,loadAc_prev,loadnz_prev,loadpc_prev,loadrdm_prev,loadrem_prev,loadri_prev,read_prev,selrdm_prev,selrem_prev,selual_prev,sumpc_prev,TurndspOn_prev,write_prev);
`endif
	if (
		( ac_expected_prev[0] !== 1'bx ) && ( ac_prev[0] !== ac_expected_prev[0] )
		&& ((ac_expected_prev[0] !== last_ac_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[0] = ac_expected_prev[0];
	end
	if (
		( ac_expected_prev[1] !== 1'bx ) && ( ac_prev[1] !== ac_expected_prev[1] )
		&& ((ac_expected_prev[1] !== last_ac_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[1] = ac_expected_prev[1];
	end
	if (
		( ac_expected_prev[2] !== 1'bx ) && ( ac_prev[2] !== ac_expected_prev[2] )
		&& ((ac_expected_prev[2] !== last_ac_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[2] = ac_expected_prev[2];
	end
	if (
		( ac_expected_prev[3] !== 1'bx ) && ( ac_prev[3] !== ac_expected_prev[3] )
		&& ((ac_expected_prev[3] !== last_ac_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[3] = ac_expected_prev[3];
	end
	if (
		( ac_expected_prev[4] !== 1'bx ) && ( ac_prev[4] !== ac_expected_prev[4] )
		&& ((ac_expected_prev[4] !== last_ac_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[4] = ac_expected_prev[4];
	end
	if (
		( ac_expected_prev[5] !== 1'bx ) && ( ac_prev[5] !== ac_expected_prev[5] )
		&& ((ac_expected_prev[5] !== last_ac_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[5] = ac_expected_prev[5];
	end
	if (
		( ac_expected_prev[6] !== 1'bx ) && ( ac_prev[6] !== ac_expected_prev[6] )
		&& ((ac_expected_prev[6] !== last_ac_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[6] = ac_expected_prev[6];
	end
	if (
		( ac_expected_prev[7] !== 1'bx ) && ( ac_prev[7] !== ac_expected_prev[7] )
		&& ((ac_expected_prev[7] !== last_ac_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[7] = ac_expected_prev[7];
	end
	if (
		( code_expected_prev[0] !== 1'bx ) && ( code_prev[0] !== code_expected_prev[0] )
		&& ((code_expected_prev[0] !== last_code_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_expected_prev);
		$display ("     Real value = %b", code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_code_exp[0] = code_expected_prev[0];
	end
	if (
		( code_expected_prev[1] !== 1'bx ) && ( code_prev[1] !== code_expected_prev[1] )
		&& ((code_expected_prev[1] !== last_code_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_expected_prev);
		$display ("     Real value = %b", code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_code_exp[1] = code_expected_prev[1];
	end
	if (
		( code_expected_prev[2] !== 1'bx ) && ( code_prev[2] !== code_expected_prev[2] )
		&& ((code_expected_prev[2] !== last_code_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_expected_prev);
		$display ("     Real value = %b", code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_code_exp[2] = code_expected_prev[2];
	end
	if (
		( code_expected_prev[3] !== 1'bx ) && ( code_prev[3] !== code_expected_prev[3] )
		&& ((code_expected_prev[3] !== last_code_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_expected_prev);
		$display ("     Real value = %b", code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_code_exp[3] = code_expected_prev[3];
	end
	if (
		( dado_expected_prev[0] !== 1'bx ) && ( dado_prev[0] !== dado_expected_prev[0] )
		&& ((dado_expected_prev[0] !== last_dado_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dado_exp[0] = dado_expected_prev[0];
	end
	if (
		( dado_expected_prev[1] !== 1'bx ) && ( dado_prev[1] !== dado_expected_prev[1] )
		&& ((dado_expected_prev[1] !== last_dado_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dado_exp[1] = dado_expected_prev[1];
	end
	if (
		( dado_expected_prev[2] !== 1'bx ) && ( dado_prev[2] !== dado_expected_prev[2] )
		&& ((dado_expected_prev[2] !== last_dado_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dado_exp[2] = dado_expected_prev[2];
	end
	if (
		( dado_expected_prev[3] !== 1'bx ) && ( dado_prev[3] !== dado_expected_prev[3] )
		&& ((dado_expected_prev[3] !== last_dado_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dado_exp[3] = dado_expected_prev[3];
	end
	if (
		( dado_expected_prev[4] !== 1'bx ) && ( dado_prev[4] !== dado_expected_prev[4] )
		&& ((dado_expected_prev[4] !== last_dado_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dado_exp[4] = dado_expected_prev[4];
	end
	if (
		( dado_expected_prev[5] !== 1'bx ) && ( dado_prev[5] !== dado_expected_prev[5] )
		&& ((dado_expected_prev[5] !== last_dado_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dado_exp[5] = dado_expected_prev[5];
	end
	if (
		( dado_expected_prev[6] !== 1'bx ) && ( dado_prev[6] !== dado_expected_prev[6] )
		&& ((dado_expected_prev[6] !== last_dado_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dado_exp[6] = dado_expected_prev[6];
	end
	if (
		( dado_expected_prev[7] !== 1'bx ) && ( dado_prev[7] !== dado_expected_prev[7] )
		&& ((dado_expected_prev[7] !== last_dado_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dado_exp[7] = dado_expected_prev[7];
	end
	if (
		( DisplayAC1_expected_prev[0] !== 1'bx ) && ( DisplayAC1_prev[0] !== DisplayAC1_expected_prev[0] )
		&& ((DisplayAC1_expected_prev[0] !== last_DisplayAC1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC1_expected_prev);
		$display ("     Real value = %b", DisplayAC1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayAC1_exp[0] = DisplayAC1_expected_prev[0];
	end
	if (
		( DisplayAC1_expected_prev[1] !== 1'bx ) && ( DisplayAC1_prev[1] !== DisplayAC1_expected_prev[1] )
		&& ((DisplayAC1_expected_prev[1] !== last_DisplayAC1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC1_expected_prev);
		$display ("     Real value = %b", DisplayAC1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayAC1_exp[1] = DisplayAC1_expected_prev[1];
	end
	if (
		( DisplayAC1_expected_prev[2] !== 1'bx ) && ( DisplayAC1_prev[2] !== DisplayAC1_expected_prev[2] )
		&& ((DisplayAC1_expected_prev[2] !== last_DisplayAC1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC1_expected_prev);
		$display ("     Real value = %b", DisplayAC1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayAC1_exp[2] = DisplayAC1_expected_prev[2];
	end
	if (
		( DisplayAC1_expected_prev[3] !== 1'bx ) && ( DisplayAC1_prev[3] !== DisplayAC1_expected_prev[3] )
		&& ((DisplayAC1_expected_prev[3] !== last_DisplayAC1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC1_expected_prev);
		$display ("     Real value = %b", DisplayAC1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayAC1_exp[3] = DisplayAC1_expected_prev[3];
	end
	if (
		( DisplayAC1_expected_prev[4] !== 1'bx ) && ( DisplayAC1_prev[4] !== DisplayAC1_expected_prev[4] )
		&& ((DisplayAC1_expected_prev[4] !== last_DisplayAC1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC1_expected_prev);
		$display ("     Real value = %b", DisplayAC1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayAC1_exp[4] = DisplayAC1_expected_prev[4];
	end
	if (
		( DisplayAC1_expected_prev[5] !== 1'bx ) && ( DisplayAC1_prev[5] !== DisplayAC1_expected_prev[5] )
		&& ((DisplayAC1_expected_prev[5] !== last_DisplayAC1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC1_expected_prev);
		$display ("     Real value = %b", DisplayAC1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayAC1_exp[5] = DisplayAC1_expected_prev[5];
	end
	if (
		( DisplayAC1_expected_prev[6] !== 1'bx ) && ( DisplayAC1_prev[6] !== DisplayAC1_expected_prev[6] )
		&& ((DisplayAC1_expected_prev[6] !== last_DisplayAC1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC1_expected_prev);
		$display ("     Real value = %b", DisplayAC1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayAC1_exp[6] = DisplayAC1_expected_prev[6];
	end
	if (
		( DisplayAC2_expected_prev[0] !== 1'bx ) && ( DisplayAC2_prev[0] !== DisplayAC2_expected_prev[0] )
		&& ((DisplayAC2_expected_prev[0] !== last_DisplayAC2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC2_expected_prev);
		$display ("     Real value = %b", DisplayAC2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayAC2_exp[0] = DisplayAC2_expected_prev[0];
	end
	if (
		( DisplayAC2_expected_prev[1] !== 1'bx ) && ( DisplayAC2_prev[1] !== DisplayAC2_expected_prev[1] )
		&& ((DisplayAC2_expected_prev[1] !== last_DisplayAC2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC2_expected_prev);
		$display ("     Real value = %b", DisplayAC2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayAC2_exp[1] = DisplayAC2_expected_prev[1];
	end
	if (
		( DisplayAC2_expected_prev[2] !== 1'bx ) && ( DisplayAC2_prev[2] !== DisplayAC2_expected_prev[2] )
		&& ((DisplayAC2_expected_prev[2] !== last_DisplayAC2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC2_expected_prev);
		$display ("     Real value = %b", DisplayAC2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayAC2_exp[2] = DisplayAC2_expected_prev[2];
	end
	if (
		( DisplayAC2_expected_prev[3] !== 1'bx ) && ( DisplayAC2_prev[3] !== DisplayAC2_expected_prev[3] )
		&& ((DisplayAC2_expected_prev[3] !== last_DisplayAC2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC2_expected_prev);
		$display ("     Real value = %b", DisplayAC2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayAC2_exp[3] = DisplayAC2_expected_prev[3];
	end
	if (
		( DisplayAC2_expected_prev[4] !== 1'bx ) && ( DisplayAC2_prev[4] !== DisplayAC2_expected_prev[4] )
		&& ((DisplayAC2_expected_prev[4] !== last_DisplayAC2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC2_expected_prev);
		$display ("     Real value = %b", DisplayAC2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayAC2_exp[4] = DisplayAC2_expected_prev[4];
	end
	if (
		( DisplayAC2_expected_prev[5] !== 1'bx ) && ( DisplayAC2_prev[5] !== DisplayAC2_expected_prev[5] )
		&& ((DisplayAC2_expected_prev[5] !== last_DisplayAC2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC2_expected_prev);
		$display ("     Real value = %b", DisplayAC2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayAC2_exp[5] = DisplayAC2_expected_prev[5];
	end
	if (
		( DisplayAC2_expected_prev[6] !== 1'bx ) && ( DisplayAC2_prev[6] !== DisplayAC2_expected_prev[6] )
		&& ((DisplayAC2_expected_prev[6] !== last_DisplayAC2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAC2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAC2_expected_prev);
		$display ("     Real value = %b", DisplayAC2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayAC2_exp[6] = DisplayAC2_expected_prev[6];
	end
	if (
		( DisplayAdd_expected_prev[0] !== 1'bx ) && ( DisplayAdd_prev[0] !== DisplayAdd_expected_prev[0] )
		&& ((DisplayAdd_expected_prev[0] !== last_DisplayAdd_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAdd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAdd_expected_prev);
		$display ("     Real value = %b", DisplayAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayAdd_exp[0] = DisplayAdd_expected_prev[0];
	end
	if (
		( DisplayAdd_expected_prev[1] !== 1'bx ) && ( DisplayAdd_prev[1] !== DisplayAdd_expected_prev[1] )
		&& ((DisplayAdd_expected_prev[1] !== last_DisplayAdd_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAdd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAdd_expected_prev);
		$display ("     Real value = %b", DisplayAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayAdd_exp[1] = DisplayAdd_expected_prev[1];
	end
	if (
		( DisplayAdd_expected_prev[2] !== 1'bx ) && ( DisplayAdd_prev[2] !== DisplayAdd_expected_prev[2] )
		&& ((DisplayAdd_expected_prev[2] !== last_DisplayAdd_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAdd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAdd_expected_prev);
		$display ("     Real value = %b", DisplayAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayAdd_exp[2] = DisplayAdd_expected_prev[2];
	end
	if (
		( DisplayAdd_expected_prev[3] !== 1'bx ) && ( DisplayAdd_prev[3] !== DisplayAdd_expected_prev[3] )
		&& ((DisplayAdd_expected_prev[3] !== last_DisplayAdd_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAdd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAdd_expected_prev);
		$display ("     Real value = %b", DisplayAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayAdd_exp[3] = DisplayAdd_expected_prev[3];
	end
	if (
		( DisplayAdd_expected_prev[4] !== 1'bx ) && ( DisplayAdd_prev[4] !== DisplayAdd_expected_prev[4] )
		&& ((DisplayAdd_expected_prev[4] !== last_DisplayAdd_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAdd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAdd_expected_prev);
		$display ("     Real value = %b", DisplayAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayAdd_exp[4] = DisplayAdd_expected_prev[4];
	end
	if (
		( DisplayAdd_expected_prev[5] !== 1'bx ) && ( DisplayAdd_prev[5] !== DisplayAdd_expected_prev[5] )
		&& ((DisplayAdd_expected_prev[5] !== last_DisplayAdd_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAdd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAdd_expected_prev);
		$display ("     Real value = %b", DisplayAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayAdd_exp[5] = DisplayAdd_expected_prev[5];
	end
	if (
		( DisplayAdd_expected_prev[6] !== 1'bx ) && ( DisplayAdd_prev[6] !== DisplayAdd_expected_prev[6] )
		&& ((DisplayAdd_expected_prev[6] !== last_DisplayAdd_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayAdd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayAdd_expected_prev);
		$display ("     Real value = %b", DisplayAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayAdd_exp[6] = DisplayAdd_expected_prev[6];
	end
	if (
		( DisplayD1_expected_prev[0] !== 1'bx ) && ( DisplayD1_prev[0] !== DisplayD1_expected_prev[0] )
		&& ((DisplayD1_expected_prev[0] !== last_DisplayD1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD1_expected_prev);
		$display ("     Real value = %b", DisplayD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayD1_exp[0] = DisplayD1_expected_prev[0];
	end
	if (
		( DisplayD1_expected_prev[1] !== 1'bx ) && ( DisplayD1_prev[1] !== DisplayD1_expected_prev[1] )
		&& ((DisplayD1_expected_prev[1] !== last_DisplayD1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD1_expected_prev);
		$display ("     Real value = %b", DisplayD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayD1_exp[1] = DisplayD1_expected_prev[1];
	end
	if (
		( DisplayD1_expected_prev[2] !== 1'bx ) && ( DisplayD1_prev[2] !== DisplayD1_expected_prev[2] )
		&& ((DisplayD1_expected_prev[2] !== last_DisplayD1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD1_expected_prev);
		$display ("     Real value = %b", DisplayD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayD1_exp[2] = DisplayD1_expected_prev[2];
	end
	if (
		( DisplayD1_expected_prev[3] !== 1'bx ) && ( DisplayD1_prev[3] !== DisplayD1_expected_prev[3] )
		&& ((DisplayD1_expected_prev[3] !== last_DisplayD1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD1_expected_prev);
		$display ("     Real value = %b", DisplayD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayD1_exp[3] = DisplayD1_expected_prev[3];
	end
	if (
		( DisplayD1_expected_prev[4] !== 1'bx ) && ( DisplayD1_prev[4] !== DisplayD1_expected_prev[4] )
		&& ((DisplayD1_expected_prev[4] !== last_DisplayD1_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD1_expected_prev);
		$display ("     Real value = %b", DisplayD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayD1_exp[4] = DisplayD1_expected_prev[4];
	end
	if (
		( DisplayD1_expected_prev[5] !== 1'bx ) && ( DisplayD1_prev[5] !== DisplayD1_expected_prev[5] )
		&& ((DisplayD1_expected_prev[5] !== last_DisplayD1_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD1_expected_prev);
		$display ("     Real value = %b", DisplayD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayD1_exp[5] = DisplayD1_expected_prev[5];
	end
	if (
		( DisplayD1_expected_prev[6] !== 1'bx ) && ( DisplayD1_prev[6] !== DisplayD1_expected_prev[6] )
		&& ((DisplayD1_expected_prev[6] !== last_DisplayD1_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD1_expected_prev);
		$display ("     Real value = %b", DisplayD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayD1_exp[6] = DisplayD1_expected_prev[6];
	end
	if (
		( DisplayD2_expected_prev[0] !== 1'bx ) && ( DisplayD2_prev[0] !== DisplayD2_expected_prev[0] )
		&& ((DisplayD2_expected_prev[0] !== last_DisplayD2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD2_expected_prev);
		$display ("     Real value = %b", DisplayD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayD2_exp[0] = DisplayD2_expected_prev[0];
	end
	if (
		( DisplayD2_expected_prev[1] !== 1'bx ) && ( DisplayD2_prev[1] !== DisplayD2_expected_prev[1] )
		&& ((DisplayD2_expected_prev[1] !== last_DisplayD2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD2_expected_prev);
		$display ("     Real value = %b", DisplayD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayD2_exp[1] = DisplayD2_expected_prev[1];
	end
	if (
		( DisplayD2_expected_prev[2] !== 1'bx ) && ( DisplayD2_prev[2] !== DisplayD2_expected_prev[2] )
		&& ((DisplayD2_expected_prev[2] !== last_DisplayD2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD2_expected_prev);
		$display ("     Real value = %b", DisplayD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayD2_exp[2] = DisplayD2_expected_prev[2];
	end
	if (
		( DisplayD2_expected_prev[3] !== 1'bx ) && ( DisplayD2_prev[3] !== DisplayD2_expected_prev[3] )
		&& ((DisplayD2_expected_prev[3] !== last_DisplayD2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD2_expected_prev);
		$display ("     Real value = %b", DisplayD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayD2_exp[3] = DisplayD2_expected_prev[3];
	end
	if (
		( DisplayD2_expected_prev[4] !== 1'bx ) && ( DisplayD2_prev[4] !== DisplayD2_expected_prev[4] )
		&& ((DisplayD2_expected_prev[4] !== last_DisplayD2_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD2_expected_prev);
		$display ("     Real value = %b", DisplayD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayD2_exp[4] = DisplayD2_expected_prev[4];
	end
	if (
		( DisplayD2_expected_prev[5] !== 1'bx ) && ( DisplayD2_prev[5] !== DisplayD2_expected_prev[5] )
		&& ((DisplayD2_expected_prev[5] !== last_DisplayD2_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD2_expected_prev);
		$display ("     Real value = %b", DisplayD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayD2_exp[5] = DisplayD2_expected_prev[5];
	end
	if (
		( DisplayD2_expected_prev[6] !== 1'bx ) && ( DisplayD2_prev[6] !== DisplayD2_expected_prev[6] )
		&& ((DisplayD2_expected_prev[6] !== last_DisplayD2_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayD2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayD2_expected_prev);
		$display ("     Real value = %b", DisplayD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayD2_exp[6] = DisplayD2_expected_prev[6];
	end
	if (
		( endereco_expected_prev[0] !== 1'bx ) && ( endereco_prev[0] !== endereco_expected_prev[0] )
		&& ((endereco_expected_prev[0] !== last_endereco_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_exp[0] = endereco_expected_prev[0];
	end
	if (
		( endereco_expected_prev[1] !== 1'bx ) && ( endereco_prev[1] !== endereco_expected_prev[1] )
		&& ((endereco_expected_prev[1] !== last_endereco_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_exp[1] = endereco_expected_prev[1];
	end
	if (
		( endereco_expected_prev[2] !== 1'bx ) && ( endereco_prev[2] !== endereco_expected_prev[2] )
		&& ((endereco_expected_prev[2] !== last_endereco_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_exp[2] = endereco_expected_prev[2];
	end
	if (
		( endereco_expected_prev[3] !== 1'bx ) && ( endereco_prev[3] !== endereco_expected_prev[3] )
		&& ((endereco_expected_prev[3] !== last_endereco_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_exp[3] = endereco_expected_prev[3];
	end
	if (
		( endereco_expected_prev[4] !== 1'bx ) && ( endereco_prev[4] !== endereco_expected_prev[4] )
		&& ((endereco_expected_prev[4] !== last_endereco_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_exp[4] = endereco_expected_prev[4];
	end
	if (
		( endereco_expected_prev[5] !== 1'bx ) && ( endereco_prev[5] !== endereco_expected_prev[5] )
		&& ((endereco_expected_prev[5] !== last_endereco_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_exp[5] = endereco_expected_prev[5];
	end
	if (
		( endereco_expected_prev[6] !== 1'bx ) && ( endereco_prev[6] !== endereco_expected_prev[6] )
		&& ((endereco_expected_prev[6] !== last_endereco_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_exp[6] = endereco_expected_prev[6];
	end
	if (
		( endereco_expected_prev[7] !== 1'bx ) && ( endereco_prev[7] !== endereco_expected_prev[7] )
		&& ((endereco_expected_prev[7] !== last_endereco_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_exp[7] = endereco_expected_prev[7];
	end
	if (
		( loadAc_expected_prev !== 1'bx ) && ( loadAc_prev !== loadAc_expected_prev )
		&& ((loadAc_expected_prev !== last_loadAc_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port loadAc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", loadAc_expected_prev);
		$display ("     Real value = %b", loadAc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_loadAc_exp = loadAc_expected_prev;
	end
	if (
		( loadnz_expected_prev !== 1'bx ) && ( loadnz_prev !== loadnz_expected_prev )
		&& ((loadnz_expected_prev !== last_loadnz_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port loadnz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", loadnz_expected_prev);
		$display ("     Real value = %b", loadnz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_loadnz_exp = loadnz_expected_prev;
	end
	if (
		( loadpc_expected_prev !== 1'bx ) && ( loadpc_prev !== loadpc_expected_prev )
		&& ((loadpc_expected_prev !== last_loadpc_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port loadpc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", loadpc_expected_prev);
		$display ("     Real value = %b", loadpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_loadpc_exp = loadpc_expected_prev;
	end
	if (
		( loadrdm_expected_prev !== 1'bx ) && ( loadrdm_prev !== loadrdm_expected_prev )
		&& ((loadrdm_expected_prev !== last_loadrdm_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port loadrdm :: @time = %t",  $realtime);
		$display ("     Expected value = %b", loadrdm_expected_prev);
		$display ("     Real value = %b", loadrdm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_loadrdm_exp = loadrdm_expected_prev;
	end
	if (
		( loadrem_expected_prev !== 1'bx ) && ( loadrem_prev !== loadrem_expected_prev )
		&& ((loadrem_expected_prev !== last_loadrem_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port loadrem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", loadrem_expected_prev);
		$display ("     Real value = %b", loadrem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_loadrem_exp = loadrem_expected_prev;
	end
	if (
		( loadri_expected_prev !== 1'bx ) && ( loadri_prev !== loadri_expected_prev )
		&& ((loadri_expected_prev !== last_loadri_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port loadri :: @time = %t",  $realtime);
		$display ("     Expected value = %b", loadri_expected_prev);
		$display ("     Real value = %b", loadri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_loadri_exp = loadri_expected_prev;
	end
	if (
		( read_expected_prev !== 1'bx ) && ( read_prev !== read_expected_prev )
		&& ((read_expected_prev !== last_read_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_expected_prev);
		$display ("     Real value = %b", read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_exp = read_expected_prev;
	end
	if (
		( selrdm_expected_prev[0] !== 1'bx ) && ( selrdm_prev[0] !== selrdm_expected_prev[0] )
		&& ((selrdm_expected_prev[0] !== last_selrdm_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selrdm[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selrdm_expected_prev);
		$display ("     Real value = %b", selrdm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_selrdm_exp[0] = selrdm_expected_prev[0];
	end
	if (
		( selrdm_expected_prev[1] !== 1'bx ) && ( selrdm_prev[1] !== selrdm_expected_prev[1] )
		&& ((selrdm_expected_prev[1] !== last_selrdm_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selrdm[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selrdm_expected_prev);
		$display ("     Real value = %b", selrdm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_selrdm_exp[1] = selrdm_expected_prev[1];
	end
	if (
		( selrem_expected_prev !== 1'bx ) && ( selrem_prev !== selrem_expected_prev )
		&& ((selrem_expected_prev !== last_selrem_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selrem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selrem_expected_prev);
		$display ("     Real value = %b", selrem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_selrem_exp = selrem_expected_prev;
	end
	if (
		( selual_expected_prev[0] !== 1'bx ) && ( selual_prev[0] !== selual_expected_prev[0] )
		&& ((selual_expected_prev[0] !== last_selual_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selual[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selual_expected_prev);
		$display ("     Real value = %b", selual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_selual_exp[0] = selual_expected_prev[0];
	end
	if (
		( selual_expected_prev[1] !== 1'bx ) && ( selual_prev[1] !== selual_expected_prev[1] )
		&& ((selual_expected_prev[1] !== last_selual_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selual[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selual_expected_prev);
		$display ("     Real value = %b", selual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_selual_exp[1] = selual_expected_prev[1];
	end
	if (
		( selual_expected_prev[2] !== 1'bx ) && ( selual_prev[2] !== selual_expected_prev[2] )
		&& ((selual_expected_prev[2] !== last_selual_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selual[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selual_expected_prev);
		$display ("     Real value = %b", selual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_selual_exp[2] = selual_expected_prev[2];
	end
	if (
		( sumpc_expected_prev !== 1'bx ) && ( sumpc_prev !== sumpc_expected_prev )
		&& ((sumpc_expected_prev !== last_sumpc_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sumpc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sumpc_expected_prev);
		$display ("     Real value = %b", sumpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_sumpc_exp = sumpc_expected_prev;
	end
	if (
		( TurndspOn_expected_prev !== 1'bx ) && ( TurndspOn_prev !== TurndspOn_expected_prev )
		&& ((TurndspOn_expected_prev !== last_TurndspOn_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TurndspOn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TurndspOn_expected_prev);
		$display ("     Real value = %b", TurndspOn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_TurndspOn_exp = TurndspOn_expected_prev;
	end
	if (
		( write_expected_prev !== 1'bx ) && ( write_prev !== write_expected_prev )
		&& ((write_expected_prev !== last_write_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_expected_prev);
		$display ("     Real value = %b", write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_write_exp = write_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module NEANDER_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] choice;
reg clk;
reg go;
reg [7:0] InData;
reg reset;
// wires                                               
wire [7:0] ac;
wire [3:0] code;
wire [7:0] dado;
wire [6:0] DisplayAC1;
wire [6:0] DisplayAC2;
wire [6:0] DisplayAdd;
wire [6:0] DisplayD1;
wire [6:0] DisplayD2;
wire [7:0] endereco;
wire loadAc;
wire loadnz;
wire loadpc;
wire loadrdm;
wire loadrem;
wire loadri;
wire read;
wire [1:0] selrdm;
wire selrem;
wire [2:0] selual;
wire sumpc;
wire TurndspOn;
wire write;

wire sampler;                             

// assign statements (if any)                          
NEANDER i1 (
// port map - connection between master ports and signals/registers   
	.ac(ac),
	.choice(choice),
	.clk(clk),
	.code(code),
	.dado(dado),
	.DisplayAC1(DisplayAC1),
	.DisplayAC2(DisplayAC2),
	.DisplayAdd(DisplayAdd),
	.DisplayD1(DisplayD1),
	.DisplayD2(DisplayD2),
	.endereco(endereco),
	.go(go),
	.InData(InData),
	.loadAc(loadAc),
	.loadnz(loadnz),
	.loadpc(loadpc),
	.loadrdm(loadrdm),
	.loadrem(loadrem),
	.loadri(loadri),
	.read(read),
	.reset(reset),
	.selrdm(selrdm),
	.selrem(selrem),
	.selual(selual),
	.sumpc(sumpc),
	.TurndspOn(TurndspOn),
	.write(write)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// InData[ 7 ]
initial
begin
	InData[7] = 1'b1;
	InData[7] = #70000 1'b0;
end 
// InData[ 6 ]
initial
begin
	InData[6] = 1'b1;
	InData[6] = #70000 1'b0;
end 
// InData[ 5 ]
initial
begin
	InData[5] = 1'b1;
	InData[5] = #70000 1'b0;
end 
// InData[ 4 ]
initial
begin
	InData[4] = 1'b1;
	InData[4] = #70000 1'b0;
end 
// InData[ 3 ]
initial
begin
	InData[3] = 1'b1;
	InData[3] = #70000 1'b0;
end 
// InData[ 2 ]
initial
begin
	InData[2] = 1'b1;
	InData[2] = #70000 1'b0;
end 
// InData[ 1 ]
initial
begin
	InData[1] = 1'b1;
	InData[1] = #70000 1'b0;
end 
// InData[ 0 ]
initial
begin
	InData[0] = 1'b1;
	InData[0] = #70000 1'b0;
end 
// choice[ 1 ]
initial
begin
	choice[1] = 1'b0;
end 
// choice[ 0 ]
initial
begin
	choice[0] = 1'b0;
	choice[0] = #100000 1'b1;
	choice[0] = #10000 1'b0;
end 

// go
initial
begin
	go = 1'b1;
	go = #60000 1'b0;
end 

NEANDER_vlg_sample_tst tb_sample (
	.choice(choice),
	.clk(clk),
	.go(go),
	.InData(InData),
	.reset(reset),
	.sampler_tx(sampler)
);

NEANDER_vlg_check_tst tb_out(
	.ac(ac),
	.code(code),
	.dado(dado),
	.DisplayAC1(DisplayAC1),
	.DisplayAC2(DisplayAC2),
	.DisplayAdd(DisplayAdd),
	.DisplayD1(DisplayD1),
	.DisplayD2(DisplayD2),
	.endereco(endereco),
	.loadAc(loadAc),
	.loadnz(loadnz),
	.loadpc(loadpc),
	.loadrdm(loadrdm),
	.loadrem(loadrem),
	.loadri(loadri),
	.read(read),
	.selrdm(selrdm),
	.selrem(selrem),
	.selual(selual),
	.sumpc(sumpc),
	.TurndspOn(TurndspOn),
	.write(write),
	.sampler_rx(sampler)
);
endmodule

